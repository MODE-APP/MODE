syntax = "proto3";
package proto.generalservices;
/**
*Essential RPC
*/

service Essential {
	rpc FetchCertificate(Info) returns (File){}
}

/**
*Token Security RPC
*/
service TokenSecurity{
	rpc RequestRefreshToken(Credentials) returns (SignedToken){}
	rpc RequestAccessToken(SignedToken) returns (SignedToken){}
}

message Credentials{
	string username = 1;
	string password = 2;
}

message SignedToken{
	map<string, string> header = 1;
	map<string, string> payload = 2;
	string signature = 3;
}

/**
*Messaging RPC
*/
service Messaging {
	rpc FetchMessages(Conversation) returns (stream Message){}
	rpc SendMessage(Message) returns (MessageStatus){}
}

message ObjectID {
	bytes ID = 1;
}

message Conversation {
	ObjectID id = 1;
}

message Message {
	string text = 1;
	oneof course {
		User username = 2;
		Groupchat groupchat =3;
	}
	MessageStatus status = 4;
	ObjectID id = 5;
}

message MessageStatus {
	enum StatusCode{
		SENT = 0;
		DELIVERED = 1;
		READ = 2;
		FAILED = 3;
	}
	StatusCode code=1;
	string message=2;
}

/*
*Commenting RPC
*/
service Commenting {
	rpc PostComment(Comment) returns (GeneralStatus) {}
	rpc DeleteComment(Comment) returns (GeneralStatus) {}
	rpc EditComment(Comment) returns (GeneralStatus) {}
}

message Comment {
	string text = 1;
	ObjectID id = 2;
	User user = 3;
	FeedContent picture = 4;
}

/**
*Browsing RPC
*/
service Browsing{
	rpc GetProfile(User) returns (Profile){}
	rpc FollowUnFollow(User) returns (GeneralStatus){}
	rpc ChangePrivacy(User) returns (GeneralStatus){}
	rpc GetProfilePicture(User) returns (Picture){}
	//Need services for editing profile

}

/**
*FeedContent represents the different types of content that can be displayed on a user's feed
*/
message FeedContent{
	oneof content {
		Picture picture = 1;
		Video video = 2;
	}
}

/**
*Profile represents the data held on a user's profile
*/
message Profile {
	User user = 1;
	Picture profilePicture = 3;
	repeated FeedContent content = 4;
	string bio = 5;
}


service Posting {
	rpc PostComment(Comment) returns (GeneralStatus){}
	rpc PostFeedContent(FeedContent) returns (GeneralStatus){}
	
}

/**
*Updating RPC
*/
service Updating {
	rpc UpdateNotifications(stream Notification) returns (stream Notification){}
}


/**
*Messages not tied to specific rpc
*/

/**
*Used as a signal in bi-directional streaming to indicate to the server that the client is ready for X number of next elements
*/
message GetNext{
	int64 elements = 1;
}

/**
*Represents a follow from one user to another
*/

message NotifiableContent{
	oneof Notifiable{
		FeedContent content = 1;
		Comment comment = 2;
		Message message = 3;
	}
	enum NotifyType {
		LIKE=0;
		TAG=1;
		COMMENT=2;
		FOLLOW=3;
		MESSAGE=5;
	}
}

/**
*Represents a tag done by a user to a separate user
*/

/**
*Notification represents the kind of notifications given to users
*/
message Notification{
	NotifiableContent notifiable = 1;
	UnixTimeStamp TimeStamp = 2;
}

message UnixTimeStamp{
	int64 time=1;
}

/**
*Picture represents a picture file, its identifiers, and its comments attached
*/
message StreamingPicture {
	oneof PictureContent{
		File contentFile = 1;
		ObjectID id = 2;
		Comment comments = 3;
		UnixTimeStamp time = 4;
	}
}

/**
*Video represents a video file, its identifiers, the thumbnail, and its comments attached
*/
message Video {
	oneof VideoContent{
		File contentFile = 1;
		StreamingPicture thumbnail = 2;
		Comment comments = 3;
		ObjectID id=4;
		UnixTimeStamp time = 5;
	}
}

message User {
	string username=1;
	ObjectID id=2;
}

message Groupchat {
	repeated User users=1;
	ObjectID id=2;
}

message GeneralStatus {
	enum StatusCode {
		OK = 0;
		FAILED = 1;
		UNKNOWN = 2;
		PERMISSION_DENIED = 3;
		UNAUTHENTICATED = 4;
		UNIMPLEMENTED = 5;
		INTERNAL = 6;
		CANCELLED = 7;
	}
	StatusCode status = 1;
}

message File{
	bytes fileBytes = 1;
	string fileName = 2;
	int64 checksum = 3;
}

message StreamableFile{
	FileChunk content = 1;
	string Filename = 2;
}

message FileChunk{
	oneof ChunkContent{
		bytes fileBytes = 1;
		string fileName = 2;
		int64 checksum = 3;
	}
}
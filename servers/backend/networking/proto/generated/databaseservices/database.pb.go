// Code generated by protoc-gen-go. DO NOT EDIT.
// source: database.proto

/*
Package proto_databaseservices is a generated protocol buffer package.

It is generated from these files:
	database.proto

It has these top-level messages:
*/
package proto_databaseservices

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	proto_generalservices "MODE/servers/backend/networking/proto/generated/generalservices"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModeMongoDB service

type ModeMongoDBClient interface {
	FetchPasswordHash(ctx context.Context, in *proto_generalservices.User, opts ...grpc.CallOption) (*proto_generalservices.Credentials, error)
}

type modeMongoDBClient struct {
	cc *grpc.ClientConn
}

func NewModeMongoDBClient(cc *grpc.ClientConn) ModeMongoDBClient {
	return &modeMongoDBClient{cc}
}

func (c *modeMongoDBClient) FetchPasswordHash(ctx context.Context, in *proto_generalservices.User, opts ...grpc.CallOption) (*proto_generalservices.Credentials, error) {
	out := new(proto_generalservices.Credentials)
	err := grpc.Invoke(ctx, "/proto.databaseservices.ModeMongoDB/FetchPasswordHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModeMongoDB service

type ModeMongoDBServer interface {
	FetchPasswordHash(context.Context, *proto_generalservices.User) (*proto_generalservices.Credentials, error)
}

func RegisterModeMongoDBServer(s *grpc.Server, srv ModeMongoDBServer) {
	s.RegisterService(&_ModeMongoDB_serviceDesc, srv)
}

func _ModeMongoDB_FetchPasswordHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_generalservices.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModeMongoDBServer).FetchPasswordHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.databaseservices.ModeMongoDB/FetchPasswordHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModeMongoDBServer).FetchPasswordHash(ctx, req.(*proto_generalservices.User))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModeMongoDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.databaseservices.ModeMongoDB",
	HandlerType: (*ModeMongoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchPasswordHash",
			Handler:    _ModeMongoDB_FetchPasswordHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}

func init() { proto.RegisterFile("database.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8c, 0xb1, 0x0a, 0xc2, 0x50,
	0x0c, 0x45, 0x9d, 0x1c, 0x2a, 0x08, 0x76, 0x70, 0xa8, 0x5b, 0x3f, 0xa0, 0x0f, 0x14, 0xfc, 0x00,
	0x15, 0x71, 0x29, 0xb8, 0xe8, 0x9e, 0xf6, 0x5d, 0xda, 0xd2, 0x92, 0x48, 0xf2, 0xb0, 0xbf, 0x2f,
	0xf6, 0x51, 0x37, 0x97, 0x24, 0xe4, 0xde, 0x73, 0x92, 0xb5, 0xa7, 0x40, 0x15, 0x19, 0x8a, 0x97,
	0x4a, 0x90, 0x74, 0x3b, 0xad, 0x62, 0xfe, 0x1a, 0xf4, 0xdd, 0xd5, 0xb0, 0xec, 0xf8, 0xbd, 0xa0,
	0xe6, 0x2a, 0xaa, 0x7b, 0xb0, 0x77, 0x8c, 0x30, 0x8a, 0xf6, 0x1d, 0x37, 0x6e, 0x42, 0xe2, 0x34,
	0x37, 0x13, 0xd1, 0xb7, 0x47, 0xb2, 0x2a, 0xc5, 0xa3, 0x14, 0x6e, 0xe4, 0x72, 0x4a, 0x9f, 0xc9,
	0xe6, 0x8a, 0x50, 0xb7, 0x77, 0x32, 0x1b, 0x45, 0xfd, 0x8d, 0xac, 0x4d, 0x77, 0xb1, 0x5b, 0x34,
	0x60, 0x28, 0x0d, 0x3f, 0xc3, 0xc3, 0xa0, 0x59, 0xfe, 0x27, 0x3c, 0x2b, 0x3c, 0x38, 0x74, 0x34,
	0x58, 0xbe, 0xa8, 0x96, 0x53, 0xe9, 0xf0, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xa6, 0x97, 0xa3,
	0xcf, 0x00, 0x00, 0x00,
}
